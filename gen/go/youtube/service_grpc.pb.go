// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: youtube/service.proto

package gRPC_youtube

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YoutubeServerClient is the client API for YoutubeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YoutubeServerClient interface {
	GetVideoTags(ctx context.Context, in *Request, opts ...grpc.CallOption) (YoutubeServer_GetVideoTagsClient, error)
}

type youtubeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewYoutubeServerClient(cc grpc.ClientConnInterface) YoutubeServerClient {
	return &youtubeServerClient{cc}
}

func (c *youtubeServerClient) GetVideoTags(ctx context.Context, in *Request, opts ...grpc.CallOption) (YoutubeServer_GetVideoTagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &YoutubeServer_ServiceDesc.Streams[0], "/gRPC_youtube.YoutubeServer/GetVideoTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &youtubeServerGetVideoTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YoutubeServer_GetVideoTagsClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type youtubeServerGetVideoTagsClient struct {
	grpc.ClientStream
}

func (x *youtubeServerGetVideoTagsClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YoutubeServerServer is the server API for YoutubeServer service.
// All implementations must embed UnimplementedYoutubeServerServer
// for forward compatibility
type YoutubeServerServer interface {
	GetVideoTags(*Request, YoutubeServer_GetVideoTagsServer) error
	mustEmbedUnimplementedYoutubeServerServer()
}

// UnimplementedYoutubeServerServer must be embedded to have forward compatible implementations.
type UnimplementedYoutubeServerServer struct {
}

func (UnimplementedYoutubeServerServer) GetVideoTags(*Request, YoutubeServer_GetVideoTagsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideoTags not implemented")
}
func (UnimplementedYoutubeServerServer) mustEmbedUnimplementedYoutubeServerServer() {}

// UnsafeYoutubeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YoutubeServerServer will
// result in compilation errors.
type UnsafeYoutubeServerServer interface {
	mustEmbedUnimplementedYoutubeServerServer()
}

func RegisterYoutubeServerServer(s grpc.ServiceRegistrar, srv YoutubeServerServer) {
	s.RegisterService(&YoutubeServer_ServiceDesc, srv)
}

func _YoutubeServer_GetVideoTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YoutubeServerServer).GetVideoTags(m, &youtubeServerGetVideoTagsServer{stream})
}

type YoutubeServer_GetVideoTagsServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type youtubeServerGetVideoTagsServer struct {
	grpc.ServerStream
}

func (x *youtubeServerGetVideoTagsServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// YoutubeServer_ServiceDesc is the grpc.ServiceDesc for YoutubeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YoutubeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC_youtube.YoutubeServer",
	HandlerType: (*YoutubeServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVideoTags",
			Handler:       _YoutubeServer_GetVideoTags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "youtube/service.proto",
}
